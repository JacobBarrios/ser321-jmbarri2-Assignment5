plugins {
    id "com.github.spotbugs" version "5.0.13"
    id "checkstyle"
    id "java"
    id "application"
}

// gradle runClient -PHost=localhost -PPort=8080
task runClient(type: JavaExec) {
    group = "Client"
    description = "Run the client class"

    mainClass.set("Client")
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in

    def host = project.hasProperty("Host") ? project.property("Host") : "localhost"
    def port = project.hasProperty("Port") ? project.property("Port") : '8080'

    args host, port
}

// gradle runLeader -PCport=8080 -PNPort=8081
task runLeader(type: JavaExec) {
    group = "Leader"
    description = "Run the leader class"

    mainClass.set("Leader")
    classpath = sourceSets.main.runtimeClasspath

    def Cport = project.hasProperty("CPort") ? project.property("CPort") : '8080'
    def Nport = project.hasProperty("NPort") ? project.property("NPort") : '8081'

    args Cport, Nport
}

repositories {
    mavenCentral()
}

// gradle runNodes -PHost=localhost -PPort=8081
task runNodes(type: JavaExec) {
    group = "Nodes"
    description = "Run the nodes class"

    mainClass.set("Nodes")
    classpath = sourceSets.main.runtimeClasspath

    def host = project.hasProperty("Host") ? project.property("Host") : "localhost"
    def port = project.hasProperty("Port") ? project.property("Port") : '8081'
    def fault = project.hasProperty("Fault") ? project.property("Fault") : false

    args host, port, fault;
}

dependencies {
    implementation 'org.json:json:20171018'
    // Implement JUnit for tests
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.9.0'
}

test {
    useJUnitPlatform()
}

apply plugin: 'checkstyle'
checkstyle {
    // Keep checkstyle a little quieter
    ignoreFailures = true
    showViolations = false
}

tasks.withType(Checkstyle) {
}
checkstyle {
    toolVersion = "8.8"
}


///////////////////////////////////////////////////////////////////////
// Configure SpotBugs
///////////////////////////////////////////////////////////////////////
// To generate an HTML report instead of XML
spotbugs {
    toolVersion = '4.8.4'
    ignoreFailures = true
    showProgress = true
    effort = 'max'
    reportLevel = 'low'
}

tasks.withType(com.github.spotbugs.snom.SpotBugsTask).configureEach {
    reports {
        html.required.set(true)
        xml.required.set(false)
    }
}